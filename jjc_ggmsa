## ============================================================================
## CfWRKY ggmsa 窗口图（最终可运行版）
## ============================================================================
options(warn = 1); options(bitmapType = "cairo")
suppressPackageStartupMessages({
  library(Biostrings); library(ggplot2); library(dplyr); library(readr)
  library(ggmsa); library(systemfonts)
})

## ----------------- 路径与参数 -----------------
in_msa  <- "/wrk/luolin/wrky_family/Cf_WRKY_all_aligned.fasta"
in_map  <- "/wrk/luolin/wrky_family/CfWRKY_group_map.csv"
out_dir <- "/wrk/luolin/wrky_family/bidui_pub/"
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)

group_key <- "I"        # 画 I / II / III
palette   <- "Clustal"  # 或 "Taylor"
use_ticks <- TRUE

## 刻度显示模式（改这里！）
tick_mode <- "real"      # "real" = 真实位置 | "custom" = 自定义
custom_start <- 1        # tick_mode="custom" 时生效

## ----------------- 工具函数 -----------------
norm_id <- function(x){
  x <- as.character(x); x <- trimws(x)
  x <- sub("^>", "", x); x <- sub("\\s.*$", "", x); x <- sub("\\|.*$", "", x)
  gsub("[\u200B-\u200D\uFEFF]", "", x)
}

normalize_group_major <- function(x){
  x <- as.character(x); x <- trimws(x)
  x <- gsub("^group\\s*", "", x, ignore.case=TRUE)
  x <- gsub("\\s+","",x)
  x <- chartr("ⅠⅡⅢ","I II III", x)
  x <- toupper(x)
  sub("^(I{1,3}).*$","\\1", x)
}

auto_wrky_window <- function(aa_set, motif="WRKYG[QK]K", flank=30){
  seqs <- sapply(aa_set, as.character)
  M <- do.call(rbind, strsplit(seqs,""))
  cons <- apply(M,2,function(col){
    tab <- sort(table(col[col!="-"]),decreasing=TRUE)
    if(!length(tab)) "-" else names(tab)[1]
  })
  cons_str <- paste(cons, collapse="")
  hit <- regexpr(motif, cons_str, perl=TRUE)
  if(hit==-1) stop("未找到 WRKYG[QK]K motif")
  s <- as.integer(hit); e <- s + attr(hit,"match.length")-1
  c(start=max(1, s-flank), end=min(nchar(cons_str), e+flank))
}

## ----------------- 读取数据 -----------------
cat("读取数据...\n")
aa_all <- readAAStringSet(in_msa)
names(aa_all) <- norm_id(names(aa_all))
ann_raw <- read_csv(in_map, show_col_types = FALSE)

# 自动识别列名
cn <- tolower(names(ann_raw))
name_candidates  <- c("newname","name","id","gene","seq","seqid")
group_candidates <- c("group","classification","class","subgroup","family","cluster")
new_col <- names(ann_raw)[match(name_candidates,  cn, nomatch = 0)][1]
grp_col <- names(ann_raw)[match(group_candidates, cn, nomatch = 0)][1]

if (is.na(new_col) || is.na(grp_col)) {
  stop("CSV里没找到名称列/分组列")
}

ann <- ann_raw %>%
  transmute(Newname = .data[[new_col]], Group = .data[[grp_col]]) %>%
  mutate(Newname_norm = norm_id(Newname),
         Group_major  = normalize_group_major(Group))

cat("分组统计:\n")
print(table(ann$Group_major, useNA = "ifany"))

## ----------------- 定位窗口 -----------------
win <- auto_wrky_window(aa_all, flank = 30)
cat(sprintf("窗口: %d-%d (长度=%d)\n", win["start"], win["end"], win["end"]-win["start"]+1))

## ----------------- 筛选目标组 -----------------
ids <- ann %>% filter(Group_major == group_key) %>% pull(Newname_norm) %>% unique()
hit_idx <- match(ids, names(aa_all))
hit_idx <- hit_idx[!is.na(hit_idx)]
if(length(hit_idx) == 0) stop(sprintf("Group %s 没有匹配到序列", group_key))

sub <- aa_all[hit_idx]
names(sub) <- make.unique(names(sub), sep = "_dup")
n_seq <- length(sub)
id_lab <- names(sub)
cat(sprintf("Group %s: %d 条序列\n", group_key, n_seq))

## ----------------- 绘图 -----------------
base_family <- {
  fonts <- system_fonts()$family
  if ("Arial" %in% fonts) "Arial"
  else if ("DejaVu Sans" %in% fonts) "DejaVu Sans"
  else "sans"
}

p <- ggmsa(sub,
           start = win["start"], end = win["end"],
           color = palette,
           seq_name = FALSE,
           consensus_views = TRUE,
           use_dot = FALSE,
           none_bg = FALSE,
           char_width = 0.9) +
  geom_msaBar() +
  coord_cartesian(clip = "off") +
  theme_classic(base_size = 10) +
  theme(panel.grid = element_blank(),
        axis.title = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks  = element_blank(),
        plot.margin = margin(6, 10, 6, 150, "pt"),
        text = element_text(family = base_family))

# 左侧序列名
p <- p + geom_text(
  data = data.frame(y = seq_len(n_seq), id = id_lab),
  aes(x = win["start"] - 2, y = y, label = id),
  inherit.aes = FALSE, hjust = 1, size = 3, family = base_family
)

# 刻度标签
if (use_ticks) {
  tick_breaks <- seq(win["start"], win["end"], by = 20)
  
  if (tick_mode == "real") {
    tick_labels <- tick_breaks
    cat(sprintf("刻度: 真实位置 (%d-%d)\n", min(tick_breaks), max(tick_breaks)))
  } else if (tick_mode == "custom") {
    offset <- custom_start - win["start"]
    tick_labels <- tick_breaks + offset
    cat(sprintf("刻度: 自定义编号 (%d-%d)\n", min(tick_labels), max(tick_labels)))
  }
  
  p <- p + scale_x_continuous(breaks = tick_breaks, labels = tick_labels)
}

# 高亮 WRKY motif
cons_str <- {
  seqs <- sapply(sub, as.character)
  M <- do.call(rbind, strsplit(seqs,""))
  cons <- apply(M,2,function(col){
    tab <- sort(table(col[col!="-"]),decreasing=TRUE)
    if(!length(tab)) "-" else names(tab)[1]
  })
  paste(cons, collapse="")
}

rel_hit <- regexpr("WRKYG[QK]K", substring(cons_str, win["start"], win["end"]), perl=TRUE)
if (rel_hit > 0){
  x1 <- win["start"] + as.integer(rel_hit) - 0.5
  x2 <- x1 + attr(rel_hit,"match.length")
  p  <- p + annotate("rect", xmin = x1, xmax = x2 + 0.5, ymin = -Inf, ymax = Inf, alpha = 0.08)
}

## ----------------- 保存 -----------------
png_file <- file.path(out_dir, sprintf("CfWRKY_Group%s_MSA_window.png", group_key))
pdf_file <- file.path(out_dir, sprintf("CfWRKY_Group%s_MSA_window.pdf", group_key))

ggsave(png_file, p, width = 22, height = 12, units = "cm", dpi = 600, bg = "white")
ggsave(pdf_file, p, width = 22, height = 12, units = "cm", dpi = 600, bg = "white")

cat(sprintf("\n✓ 完成！\n  %s\n  %s\n", png_file, pdf_file))
