## ============================================================================
## CfWRKY ggmsa 窗口图（一次性输出三组；显示左侧ID；无保守性标记）
## ============================================================================
options(warn = 1); options(bitmapType = "cairo")
suppressPackageStartupMessages({
  library(Biostrings); library(ggplot2); library(dplyr); library(readr)
  library(ggmsa); library(systemfonts)
  library(showtext)
})

## ----------------- 路径与参数 -----------------
in_msa  <- "/wrk/luolin/wrky_family/Cf_WRKY_all_aligned.fasta"
in_map  <- "/wrk/luolin/wrky_family/CfWRKY_group_map.csv"
out_dir <- "/wrk/luolin/wrky_family/bidui_pub/"
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)

palette      <- "Clustal"      # "Clustal"/"Taylor"
use_ticks    <- TRUE
tick_by      <- 20
tick_mode    <- "real"         # "real" | "custom"
custom_start <- 1
dpi_export   <- 600

## ------- 字体（可按需替换） -------
pick_font <- function() {
  avail <- unique(systemfonts::system_fonts()$family)
  monos <- c("JetBrains Mono","Fira Code","Consolas","DejaVu Sans Mono",
             "Noto Sans Mono CJK SC","Noto Sans Mono","Courier New")
  cjk   <- c("Microsoft YaHei","Source Han Sans SC","Noto Sans CJK SC",
             "SimHei","SimSun","PingFang SC","Heiti SC")
  common<- c("Arial","DejaVu Sans","Liberation Sans")
  if (any(monos %in% avail)) return(monos[monos %in% avail][1])
  if (any(cjk   %in% avail)) return(cjk[cjk %in% avail][1])
  if (any(common %in% avail)) return(common[common %in% avail][1])
  "sans"
}
base_family <- pick_font()
showtext_auto(TRUE); showtext_opts(dpi = dpi_export)

## ----------------- 工具函数 -----------------
norm_id <- function(x){
  x <- as.character(x); x <- trimws(x)
  x <- sub("^>", "", x); x <- sub("\\s.*$", "", x); x <- sub("\\|.*$", "", x)
  gsub("[\u200B-\u200D\uFEFF]", "", x)
}
normalize_group_major <- function(x){
  x <- as.character(x); x <- trimws(x)
  x <- gsub("^group\\s*", "", x, ignore.case=TRUE)
  x <- gsub("\\s+","",x)
  x <- chartr("ⅠⅡⅢ","I II III", x)
  x <- toupper(x)
  sub("^(I{1,3}).*$","\\1", x)
}
auto_wrky_window <- function(aa_set, motif="WRKYG[QK]K", flank=30){
  seqs <- sapply(aa_set, as.character)
  M <- do.call(rbind, strsplit(seqs,""))
  cons <- apply(M,2,function(col){
    tab <- sort(table(col[col!="-"]),decreasing=TRUE)
    if(!length(tab)) "-" else names(tab)[1]
  })
  cons_str <- paste(cons, collapse="")
  hit <- regexpr(motif, cons_str, perl=TRUE)
  if(hit==-1) stop("未找到 WRKYG[QK]K motif")
  s <- as.integer(hit); e <- s + attr(hit,"match.length")-1
  c(start=max(1, s-flank), end=min(nchar(cons_str), e+flank))
}

## ----------------- 读取数据 -----------------
cat("读取数据...\n")
aa_all <- readAAStringSet(in_msa)
names(aa_all) <- norm_id(names(aa_all))
ann_raw <- read_csv(in_map, show_col_types = FALSE)

cn <- tolower(names(ann_raw))
name_candidates  <- c("newname","name","id","gene","seq","seqid")
group_candidates <- c("group","classification","class","subgroup","family","cluster")
new_col <- names(ann_raw)[match(name_candidates,  cn, nomatch = 0)][1]
grp_col <- names(ann_raw)[match(group_candidates, cn, nomatch = 0)][1]
if (is.na(new_col) || is.na(grp_col)) stop("CSV里没找到名称列/分组列")

ann <- ann_raw %>%
  transmute(Newname = .data[[new_col]], Group = .data[[grp_col]]) %>%
  mutate(Newname_norm = norm_id(Newname),
         Group_major  = normalize_group_major(Group))

cat("分组统计:\n")
print(table(ann$Group_major, useNA = "ifany"))

## ----------------- 统一窗口 -----------------
win <- auto_wrky_window(aa_all, flank = 30)
cat(sprintf("窗口: %d-%d (长度=%d)\n", win["start"], win["end"], win["end"]-win["start"]+1))

## ----------------- 绘图函数（单组） -----------------
plot_group <- function(group_key){
  ids <- ann %>% filter(Group_major == group_key) %>% pull(Newname_norm) %>% unique()
  hit_idx <- match(ids, names(aa_all)); hit_idx <- hit_idx[!is.na(hit_idx)]
  if (!length(hit_idx)) { warning(sprintf("Group %s 无匹配序列", group_key)); return(NULL) }

  sub <- aa_all[hit_idx]
  names(sub) <- make.unique(names(sub), sep = "_dup")
  n_seq <- length(sub)
  cat(sprintf("Group %s: %d 条序列\n", group_key, n_seq))

  p <- ggmsa(sub,
             start = win["start"], end = win["end"],
             color = palette,
             seq_name = TRUE,        # 交给 ggmsa 显示左侧 ID
             consensus_views = FALSE,
             use_dot = FALSE,
             none_bg = FALSE,
             char_width = 0.9)

  p <- p +
    coord_cartesian(clip = "off") +
    theme_classic(base_size = 10, base_family = base_family) +
    theme(
      axis.title   = element_blank(),
      # 不要隐藏 y 轴文字！这就是左侧 ID：
      axis.text.y  = element_text(size = 7, family = base_family, hjust = 1),
      axis.ticks.y = element_blank(),
      panel.grid   = element_blank(),
      # 左边距留足，让长 ID 不被切掉
      plot.margin  = margin(10, 10, 10, 120, "pt")
    )

  if (use_ticks) {
    tick_breaks <- seq(win["start"], win["end"], by = tick_by)
    tick_labels <- if (tick_mode == "real") tick_breaks else tick_breaks + (custom_start - win["start"])
    p <- p + scale_x_continuous(breaks = tick_breaks, labels = tick_labels)
  } else {
    p <- p + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
  }

  # 高亮 WRKYG[QK]K（在组内共识上定位）
  cons_str <- {
    seqs <- sapply(sub, as.character)
    M <- do.call(rbind, strsplit(seqs,""))
    cons <- apply(M,2,function(col){
      tab <- sort(table(col[col!="-"]),decreasing=TRUE)
      if(!length(tab)) "-" else names(tab)[1]
    })
    paste(cons, collapse="")
  }
  rel_hit <- regexpr("WRKYG[QK]K", substring(cons_str, win["start"], win["end"]), perl=TRUE)
  if (rel_hit > 0){
    x1 <- win["start"] + as.integer(rel_hit) - 1 + 0.5
    x2 <- x1 + attr(rel_hit,"match.length") - 1
    p <- p + annotate("rect", xmin = x1 - 0.5, xmax = x2 + 0.5,
                      ymin = -Inf, ymax = Inf, alpha = 0.08)
  }

  list(plot = p, n_seq = n_seq)
}

## ----------------- 批量输出三组（自动高度） -----------------
for (gk in c("I","II","III")) {
  res <- plot_group(gk)
  if (is.null(res)) next
  p <- res$plot; n_seq <- res$n_seq

  # 高度随行数自适应
  height_cm <- max(12, 0.26 * n_seq + 4)

  png_file <- file.path(out_dir, sprintf("CfWRKY_Group%s_MSA_window.png", gk))
  pdf_file <- file.path(out_dir, sprintf("CfWRKY_Group%s_MSA_window.pdf", gk))
  ggsave(png_file, p, width = 24, height = height_cm, units = "cm", dpi = dpi_export, bg = "white")
  ggsave(pdf_file, p, width = 24, height = height_cm, units = "cm", dpi = dpi_export, bg = "white")
  cat(sprintf("✓ 已导出 Group %s（高度 %.1f cm）：\n  %s\n  %s\n", gk, height_cm, png_file, pdf_file))
}

cat("\n全部完成！\n")
